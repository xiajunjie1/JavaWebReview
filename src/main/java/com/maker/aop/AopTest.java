package com.maker.aop;
/**
 * AOP:面向切面编程
 * 	通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术
 * 	作用：在程序运行期间，在不修改源码的情况下对方法进行功能加强
 * 	优势：减少重复代码，提高开发效率，并且便于维护
 * 
 * AOP底层原理：
 * 	动态代理技术
 * 		1.JDK动态代理技术：基于接口的动态代理技术
 * 			JDK的动态代理，只能代理有接口的实现类
 * 		2.cglib：基于父类的动态代理技术
 * 	需要增强的类，如果存在接口，那么就可以使用JDK动态代理，如果没有接口，那么就可以使用cglib动态代理
 * 
 * 
 * AOP相关概念：
 * 	Target（目标对象）：代理的目标对象
 * 	Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
 * 	Joinpoint（连接点）：所谓的连接点是被拦截到的点。在Spring中这些点指的是方法，因为Spring只支持方法类型的连接点
 * 	Pointcut（切入点）：我们要对哪些Jointpoint进行拦截的定义
 * 	Advice（通知/增强）：需要对切入点进行增强的方法
 * 	Aspect（切面）：切入点被增强后称为切面
 * 	Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态织入，而AspectJ采用编译期织入和类装载期织入
 * 
 * 
 * AOP开发明确的事项
 * 	1.要编写的内容
 * 		编写核心业务代码（目标类的目标方法）
 * 		编写切面类，切面类中有通知（增强功能方法）
 * 		在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合
 * 	2.AOP技术实现的内容
 * 		Spring框架监控切入点的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象
 * 		根据通知的类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行
 * 	3.AOP底层使用哪种代理方式
 * 		在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式
 * 
 * 编写AOP程序
 * 	1.导入坐标（Spring-context中包含AOP的jar包）：导入aspectjweaver.jar的jar包
 * 	2.创建目标接口和目标类（内部有切点）
 * 	3.创建切面类（内部有增强方法）
 * 	4.将目标类和切面类的创建交由Spring
 * 	5.在Spring的xml配置文件中配置织入关系：在配置之前，需要导入aop相关的命名空间和约束
 * 	6.测试代码
 * 
 * 	切点表达式的配置方式
 * 		基本语法：execution([修饰符]返回值类型 包名.类名.方法名(参数))
 * 			访问修饰符可以省略
 * 			返回值类型、包名、类名、方法名可以用*代表任意
 * 			包名与类名之间一个点（.）代表当前包下的类，包名与类名之间两个点（..）代表当前包及其子包下的类
 * 			参数列表可以使用两个点..表示任意个数，任意类型的参数列表
 * 
 * 		例子：
 * 			execution(void com.maker.aop.TestService.*(..)),表示TestService类中所有返回值为空的方法
 * 			execution(* com.maker.aop.TestService.*(..)),表示TestService类中所有的方法
 * 			execution(* com.maker.aop.*.*(..)),表示com.maker.aop中所有的类所有的方法
 * 			execution(* com.maker..*.*(..)),表示com.maker中以及com.maker下的子包中的所有类的所有方法
 * 			execution(* *..*.*(..)),表示该项目中所有的类中的所有的方法
 * 
 * 
 * 编写AOP程序（注解）
 * 	1.导入坐标
 * 	2.创建目标接口和目标类（内部有切点）
 * 	3.创建切面类（内部有增强方法）
 * 	4.将目标类和切面类的创建交由Spring
 * 	5.在切面中使用注解配置织入关系
 * 	6.在配置文件中开启组件扫描和AOP的自动代理
 * 	7.测试
 * 
 * */
public class AopTest {

}
